@model Gestion.EF.ReturnData

<div class="row">
    <div class="col-lg-12">
        <div class="card  card-rojo">
            <div class="card-header cabecera">
                <h5 class="m-0"></h5>
            </div>
            <div class="card-body">
                <div class="row d-flex justify-content">

                    <div class="col-md-2">
                            <div class="form-group">
                                <label class="control-label">Ubicacion:</label>
                                <input id="filtroParteDiarioGrillaUbicacion" />
                            </div>
                        </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            <label class="control-label">Actividad:</label>
                            <input id="filtroParteDiarioGrillaActividad" />
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            <label class="control-label">Trabajo Hoy:</label>
                            <input id="filtroParteDiarioGrillaAvance" />
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            <label class="control-label">Trabajo Ayer:</label>
                            <input id="filtroParteDiarioGrillaAvanceAyer" />
                        </div>
                    </div>

                    <div class="col-md-2">
                        <div class="form-group">
                            <label class="control-label">Estado:</label>
                            <input id="filtroParteDiarioGrillaEstado" />
                        </div>
                    </div>

                    <div class="col-md-2">
                        <button type="button" class="btn btn-outline-dark float-right"
                                style="float:right;"
                                onclick="_BuscarFiltroGrillaActividad()">
                            <i class="fas fa-search"></i>
                            Buscar
                        </button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            <div id="GrillaKendo"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Esto es para la Confirmacion -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>

<!-- -------------- -->
<script type="text/x-kendo-template" id="Grid-Btn-template2">
    <div>  #= trabajo ? '<img src="../dist/img/checkbox.png" />' : '<img src="../dist/img/uncheckbox.png" />' # </div>
</script>
<script type="text/x-kendo-template" id="Grid-Btn-template3">
    <div>  #= finalizadaActividadNP ? '<img src="../dist/img/checkbox.png" />' : '<img src="../dist/img/uncheckbox.png" />' # </div>
</script>

<script>
    var dataGlobal;
    var data = JSON.parse('@Html.Raw(Json.Serialize(Model))');
    var IdParteDiarioFiltro = data.data;

    //#region DataParaCombos
    var dataAvance = [
        {
            id: 'SI',
            nombre: 'SI'

        },
        {
            id: 'NO',
            nombre: 'NO'
        }
    ];
    var dataAvanceAyer = [
        {
            id: 'SI',
            nombre: 'SI'

        },
        {
            id: 'NO',
            nombre: 'NO'
        }
    ];
    var dataEstado = [
        {
            id: 'Todas',
            nombre: 'Todas'

        },
        {
            id: 'Vencida',
            nombre: 'Vencida'

        },
        {
            id: 'Prox_Vencer',
            nombre: 'Próxima a vencer'

        },
        {
            id: 'Al_Dia',
            nombre: 'Al día'
        }
    ];
    var dataAcumulado = [
        {
            id: 'SI',
            nombre: 'Con Avance'

        },
        {
            id: '0%',
            nombre: 'Sin Avance(0%)'
        },
        {
            id: '20%',
            nombre: '20%-50%'
        },
        {
            id: '50%',
            nombre: '50%-80%'
        },
        {
            id: '80%',
            nombre: '80%-100%'
        },
        {
            id: '100%',
            nombre: '100% o mas'
        }
    ];
    //#endregion
    
    //Lista Temporal
    const listaItemsCalidad = [];

    //#region CRUD_ActividadGrilla

    //
    // Confirma la Modificacion de la Actividad Asyncronamente.
    //
    
    async function grabarDatoGrillaAsync(e) {
        var d = this.dataItem($(e.currentTarget).closest("tr"));

        if (d.finalizadaActividadNP == true) {
            try {
                const result = await Swal.fire({
                    html: '¿Estás seguro que desea finalizar la actividad?<br><br>',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Aceptar',
                    cancelButtonText: 'Cancelar',
                    customClass: {
                        cancelButton: 'btn btn-secondary',
                        confirmButton: 'btn btn-primary'
                    }
                });

                if (!result.isConfirmed) {
                    toastr.error("No se realizó ninguna modificación.", { timeOut: 2000 });
                    return;
                }
            } catch (error) {
                console.error("Error para mostrar mensaje de confirmacion", error);
                return;
            }
        }

        var model = {
            Id: d.id,
            AvanceActual: d.avanceActual,
            AvanceNP: d.avanceNP,
            AdjudicadoNP: d.adjudicadoNP,
            _AvanceActual: 0,
            Trabajo: d.trabajo,
            Planificacion_Proyecto_ActividadesId: d.planificacion_Proyecto_ActividadesId,
            ContratistasId: d.contratistasId,
            NotaPedidoDetalleId: d.notaPedidoDetalleId,
            FinalizadaActividadNP: d.finalizadaActividadNP,
            ParteDiarioId:IdParteDiarioFiltro,
            ListaItems: []
        };

        //Controlamos si tiene item de calidad asociado
        
         $.post("/Partediario2/ControlItemCalidadParteDiario", model).done(function (e) {
            if (!e.isError) {
                //No tiene Items de Calidad Asociados
                if (e.data == "Ok") {
                       //No tiene item asociados, disparamos el update (hay otro llamado en la funcion MostrarItensCalidadAsync)
                        $.post("/Partediario2/Update_PDActividades", model).done(function (e) {
                            if (!e.isError) {
                                toastr.success("Se modifico correctamente la actividad.", { timeOut: 2000 });
                                dataGlobal = e.data;
                                grillaActividades(dataGlobal);
                            } else {
                                toastr.error(e.data, { timeOut: 2000 });
                                grillaActividades(dataGlobal);
                            }
                        });
                 }else{
                     //Mandamos la lista Recibida para su Refactor y Mostrarla en el Popap
                     mostrarItemsCalidadAsync(e.data1, model);
                 }
            } else {
                toastr.error(e.data, { timeOut: 2000 });
                grillaActividades(dataGlobal);
            }
        });
    
    }
   
    //#endregion

    //#region CombosSinOrdenar
        cargaActividades(data.data);

        function grillaActividades(lstActividades) {
            var dataSource = new kendo.data.DataSource({
                autoSync: false,
                pageSize: 50,
                data: lstActividades,
                schema: {
                    model: {
                        id: "id",
                        fields: {
                            id: { editable: false, nullable: false },
                            sUbicacion: { editable: false, nullable: false },
                            sActividad: { editable: false, nullable: false },
                            sComentario: { editable: false, nullable: false },
                            notaPedidoNro: { editable: false, nullable: false },
                            sContratistas: { editable: false, nullable: false },
                            _ResumenAvances: { editable: false, nullable: false },
                            _ResumenFechas: { editable: false, nullable: false },
                            trabajo: { type: "boolean" },
                            _AvanceActual: { type: "number", validation: { required: true, min: 0 } },
                            finalizadaActividadNP: { type: "boolean" },
                        }
                    }
                }
            });

            var colGrilla = [];
            colGrilla.push({ field: "id", title: "Id", width: "50px", });
            colGrilla.push({field: "sUbicacion", title: "Ubicacion", media: "(min-width: 300px)" });
            colGrilla.push({ field: "sActividad", title: "Actividad", media: "(min-width: 300px)"});
            colGrilla.push({ field: "sComentario", title: "Comentario", media: "(min-width: 300px)" });
            colGrilla.push({ field: "notaPedidoNro", title: "Nota Pedido", media: "(min-width: 300px)" });
            colGrilla.push({ field: "sContratistas", title: "Contratista", media: "(min-width: 300px)" });
            colGrilla.push({ field: "_ResumenAvances", title: "Estado", media: "(min-width: 300px)", encoded: false });
            colGrilla.push({ field: "_ResumenFechas", title: "Fechas", media: "(min-width: 300px)", encoded: false });
            colGrilla.push({ field: "trabajo", title: "Trabajo <br/> Hoy", template: kendo.template($("#Grid-Btn-template2").html()), width: "80px", attributes: { style: "text-align:center;" } });
            //colGrilla.push({ field: "_AvanceActual", title: "Avance", width: "100px", attributes: { style: "text-align:center;" } });
            colGrilla.push({ field: "finalizadaActividadNP", title: "Finalizar <br/> Tarea", template: kendo.template($("#Grid-Btn-template3").html()), width: "80px", attributes: { style: "text-align:center;" } });
        colGrilla.push({ command: { name: "kcertificate", text: "", click: grabarDatoGrillaAsync }, title: "", width: "65px", attributes: { style: "text-align:center;" } });

            $("#GrillaKendo").html("<div id='grillaPDActividades'></div>");
            $("#grillaPDActividades").kendoGrid({
                columns: colGrilla,
                //filterable: {
                //    mode: "row"
                //},
                /*filter: { field: "trabajo", operator: "eq", value: true },*/
                pageable: true,
                navigatable: true,
                pageable: {
                    refresh: true,
                    pageSizes: true,
                    buttonCount: 20,
                },
                dataSource: dataSource,
                editable: true,
                dataBound: function () {
                    dataView = this.dataSource.view();
                    for (var i = 0; i < dataView.length; i++) {
                        if (dataView[i].colorFondo == "R") {
                            var uid = dataView[i].uid;
                            $("#grillaPDActividades tbody").find("tr[data-uid=" + uid + "]").addClass("K-bacgraundRow_R");
                        }
                        if (dataView[i].colorFondo == "A") {
                            var uid = dataView[i].uid;
                            $("#grillaPDActividades tbody").find("tr[data-uid=" + uid + "]").addClass("K-bacgraundRow_A");
                        }
                        if (dataView[i].colorFondo == "V") {
                            var uid = dataView[i].uid;
                            $("#grillaPDActividades tbody").find("tr[data-uid=" + uid + "]").addClass("K-bacgraundRow_V");
                        }
                        if (dataView[i].finalizadaActividadNP) {
                            var uid = dataView[i].uid;
                            $("#grillaPDActividades tbody").find("tr[data-uid=" + uid + "]").find(".k-grid-kedit").hide();
                        }
                    }
                }
            });
        }
        function cargaActividades(pIdPD) {
            $.post("/Partediario2/Buscar_PDActividades/" + pIdPD)
                .done(function (e) {
                    if (!e.isError) {
                        dataGlobal = e.data;
                        grillaActividades(dataGlobal);
                    }
                    else {
                        toastr.error(e.mensaje, { timeOut: 2000 });
                    }
                });
        }
    //#endregion

    //#region FiltrosNuevo

    //Llamadas de los Combos.
    cargarComboFiltroUbicacion();
    cargarComboFiltroActividades();
    cargarComboFiltroAvances();
    cargarComboFiltroAvancesAyer();
    cargarComboFiltroAEstado();

    //
    // Funcion que se encarga de buscar el listado de Ubicaciones del Proyecto
    //
    function cargarComboFiltroUbicacion() {
        $.post("/ParteDiario2/cargarComboFiltroUbicacion", { IdParteDiario: IdParteDiarioFiltro })
            .done(function (e) {
                if (!e.isError) {
                    datafiltro = e.data;
                    $(document).ready(function () {
                    $("#filtroParteDiarioGrillaUbicacion").kendoDropDownList({
                            filter: "contains",
                            dataTextField: "nombre",
                            dataValueField: "nombre",
                            optionLabel: "Elegir Ubicacion",
                            dataSource: datafiltro,
                            height: 400
                        });
                    });
                } else {
                    toastr.error(e.mensaje, { timeOut: 2000 });
                }
            });
    }

    //
    // Funcion que se encarga de buscar el listado de Actividades para este Proyecto
    //
    function cargarComboFiltroActividades() {
        $.post("/ParteDiario2/cargarComboFiltroActividad", { IdParteDiario: IdParteDiarioFiltro })
            .done(function (e) {
                if (!e.isError) {
                    datafiltro = e.data;
                    $(document).ready(function () {
                        $("#filtroParteDiarioGrillaActividad").kendoDropDownList({
                            filter: "contains",
                            dataTextField: "nombre",
                            dataValueField: "id",
                            optionLabel: "Elegir Actividad",
                            dataSource: datafiltro,
                            height: 400
                        });
                    });
                } else {
                    toastr.error(e.mensaje, { timeOut: 2000 });
                }
            });
    }

    //
    // Funcion que se encarga de cargar los filtros de Avance para este Proyecto para hoy
    //   
    function cargarComboFiltroAvances() {
        $("#filtroParteDiarioGrillaAvance").kendoDropDownList({
            filter: "contains",
            dataTextField: "nombre",
            dataValueField: "id",
            optionLabel: "Elegir Avance",
            dataSource: dataAvance,
            height: 400
        });
    }
    //
    // Funcion que se encarga de cargar los filtros de Avance para este Proyecto para Ayer
    //
    function cargarComboFiltroAvancesAyer() {
        $("#filtroParteDiarioGrillaAvanceAyer").kendoDropDownList({
            filter: "contains",
            dataTextField: "nombre",
            dataValueField: "id",
            optionLabel: "Elegir Avance",
            dataSource: dataAvanceAyer,
            height: 400
        });
    }

    //
    // Funcion que se encarga de cargar los filtros de Estado para este Proyecto
    //
    function cargarComboFiltroAEstado() {
        $("#filtroParteDiarioGrillaEstado").kendoDropDownList({
            filter: "contains",
            dataTextField: "nombre",
            dataValueField: "id",
            optionLabel: "Elegir Estado",
            dataSource: dataEstado,
            height: 400
        });
    }

    //
    // Funcion que se encarga de buscar el listado con los filtros seleccionados ON_CLICLK
    //
    function _BuscarFiltroGrillaActividad(){
        var model={
            IdParteDiario: IdParteDiarioFiltro,
            FiltroUbicacion: $('#filtroParteDiarioGrillaUbicacion').val(),
            IdFiltroActividad: $('#filtroParteDiarioGrillaActividad').val(),
            FiltroAvanceActualHoy: $('#filtroParteDiarioGrillaAvance').val(),
            FiltroAvanceActualAyer: $('#filtroParteDiarioGrillaAvanceAyer').val(),
            FiltroEstado: $('#filtroParteDiarioGrillaEstado').val()
        };

        $.post("/Partediario2/ListFiltroGrillaActividades", model).done(
            function (e) {
                if (!e.isError) {                   
                    grillaActividades(e.data);
                }
                else {
                    toastr.error(e.mensaje, { timeOut: 2000 });
                }
            });
    }

   

    //#endregion
    
    //#region Eventos PoPap
    //
    //Esta funcion sirve para cambiar el formato de un Objeto
    //

    async function cambiarFormatoLista(listaChange){

        var listaItemsNuevo = [];
        listaChange.forEach((item) => {
            //Esta variable tiene todo las observaciones concatenadas con "-"
            var observaciones = item.detalleCompletoTareaCalidad.toString();

            //Armamos un array con todas las partes del String
            const partes = observaciones.split(" - ");

            //Lo pasamos a un nuevo Formato e
            const nuevoObjeto = {};
            partes.forEach(item => {
                const [clave, valor] = item.split(":");
                if (valor != null && valor != undefined){
                    nuevoObjeto[clave.replace(/\s/g, "_")] = valor.trim();
                }
               
            });
            if (!("OBSERVACIONES" in nuevoObjeto)) {
                nuevoObjeto.OBSERVACIONES = "-";
            };
            nuevoObjeto.COMENTARIO="";
            nuevoObjeto.IDCALIDAD = item.idCalidad_Items;
            nuevoObjeto.ImagenesItemCalidad=[];
            listaItemsNuevo.push(nuevoObjeto);
            
        });
        return listaItemsNuevo;
    }
    //
    // Muestra el listado de Items de Calidad Si es Necesario
    //
   async function mostrarItemsCalidadAsync(lista, model) {

        var listaMostrarItems = await cambiarFormatoLista(lista);

        //Titulo del PoPap
        let contenido = '<h2 class="m-0">Listado de Items de Calidad</h2>';
        //Esta Variable es para el Combo de Estados
        let opcionesCombo = `<option value="1">Aprobado</option> <option value="2">No Aprobado</option>`;

        // Recorremos la lista
        listaMostrarItems.forEach((objeto, index) => {
            
            // Agregamos los campos
            contenido += `
                            <h3 style="text-align: left;text-decoration: underline;"><strong>ITEM N° ${index + 1} </strong></h3>

                            <p style="text-align: left; margin: 5px 0;"><strong>REALIZA ACCION:</strong> ${objeto.REALIZA_ACCION}</p>
                                <p style="text-align: left; margin: 5px 0;"><strong>SE EFECTUA:</strong> ${objeto.SE_EFECTUA}</p>
                                     <p style="text-align: left; margin: 5px 0;"><strong>TOLERANCIA:</strong> ${objeto.TOLERANCIA}</p>
                            <p style="text-align: left; margin: 5px 0;"><strong>CONTROLAR:</strong> ${objeto.CONTROLAR}</p>
                            <p style="text-align: left; margin: 5px 0;"><strong>COMO CONTROLAR:</strong> ${objeto.COMO_CONTROLAR}</p>
                            <p style="text-align: left; margin: 5px 0;"><strong>CON ELEMENTO:</strong> ${objeto.CON_ELEMENTO}</p>
                            <p style="text-align: left; margin: 5px 0;"><strong>CON PLANO:</strong> ${objeto.CON_PLANO}</p>
                            <p style="text-align: left; margin: 5px 0;"><strong>OBSERVACIONES:</strong> ${objeto.OBSERVACIONES}</p>

                            <div style="display: flex; flex-direction: column;">
                                    <select id="opciones-${index + 1}" style="margin-bottom: 10px;">
                                        ${opcionesCombo}
                                </select>
                                <textarea id="observaciones-${index +1}" placeholder = "Observaciones" style = "resize: vertical; height: 100px;" defaultValue = "" ></textarea>
                            </div>
                            </br>
                            <div class="row">
                                <div class="col-md-12">
                                    <input type="file"
                                                  id="inpFUAbmItemsCalidad"
                                                           onchange="SubirArchivosItemsCalidad(${objeto.IDCALIDAD})"
                                           multiple
                                           class="form-control"
                                           accept="image/*" />
                                </div>
                            </div>
                <hr>
                `;
        });

        const result = await Swal.fire({
            html: contenido,
            showCloseButton: true,
            showCancelButton: true,
            showConfirmButton: true,
            allowOutsideClick: false,
            confirmButtonText: 'Guardar',
            cancelButtonText: 'Cancelar',
            preConfirm: () => {
                // Esta función se ejecuta antes de confirmar
                const listaObjetosGuardados = [];

                listaMostrarItems.forEach((objeto, index) => {
                    // Obtenemos los valores seleccionados y las observaciones de cada objeto
                    const opcionSeleccionada = document.getElementById(`opciones-${index + 1}`).value;
                    const observaciones = document.getElementById(`observaciones-${index + 1}`).value;

                    // Controlamos que para la selección de "No Aprobado" el campo Observaciones no esté vacío.
                    if (opcionSeleccionada === '2' && observaciones.trim() === '') {
                        // Mostrar un mensaje de error utilizando SweetAlert2
                        Swal.showValidationMessage(`El campo de observaciones es obligatorio para el item N° "${index + 1}" cuando se selecciona "No Aprobado".`);
                    } else {
                        // Si todo está bien, agregamos el objeto a la lista de objetos guardados
                        listaObjetosGuardados.push({
                            IdCalidadItem: objeto.IDCALIDAD,
                            Valor: opcionSeleccionada === '2'? "N": "S",      //Se aprobo o no se aprobo
                            Descripcion: observaciones,
                            lIdsArchivosAdjuntos: lArchivosAdjuntosItems
                        });


                    }
                });

                // Devolvemos la lista de objetos guardados
                return listaObjetosGuardados;
            },
            inputValidator: (value) => {
                // Esta función se ejecuta después de preConfirm y permite manejar el mensaje de error personalizado
                // Si el valor es undefined (sin errores), la validación es exitosa y se cierra el SweetAlert2.
                return !value ? 'Debe completar el campo de observaciones para los items No Aprobados.' : undefined;
            },
        });

        // Si el usuario hace clic en "Guardar" y no hay errores, aquí obtenemos los objetos guardados
        if (result.isConfirmed) {
            const listaObjetosGuardados = result.value;

            //Aca disparamos el guardar de Nuevo con la lista de Items!
            model.ListaItems = listaObjetosGuardados;
            //Disparamos el guardar
            $.post("/Partediario2/Update_PDActividades", model).done(function (e) {
                if (!e.isError) {
                    toastr.success("Se modifico correctamente la actividad y los Items de Calidad.", { timeOut: 2000 });
                    dataGlobal = e.data;
                    grillaActividades(dataGlobal);
                } else {
                    toastr.error(e.data, { timeOut: 2000 });
                    grillaActividades(dataGlobal);
                }
            });
        }

        // Aquí también puedes realizar alguna acción adicional o simplemente finalizar la función
    }

   // lIdsArchivosAdjuntos: lIdsArchivosAdjuntos

    //
    // Funcion para cargar la imagen seleccionada
    //
    var lArchivosAdjuntosItems = [];
    function SubirArchivosItemsCalidad(inputElement) {
        const idCalidad = inputElement;
        var formData = new FormData();
        var idInpFU = 'inpFUAbmItemsCalidad';
        var inpFU = document.getElementById(idInpFU);


        if (inpFU.files.length) {
            for (var i = 0; i < inpFU.files.length; i++) {
                formData.append('file_' + i, inpFU.files[i]);
            }

            $.ajax({
                type: "POST",
                enctype: 'multipart/form-data',
                url: "/ArchivoAdjunto/SubirArchivos",
                data: formData,
                processData: false,
                contentType: false,
                cache: false,
                timeout: 600000,
                success: function (res) {
                if (res.error) {
                    toastr.error(res.message, { timeOut: 2000 });
                } else {
                    res.lArchivosAdjuntos.forEach(aa => {
                         const imagenConCalidad = {
                             IdCalidad: idCalidad,
                                ImagenId: aa.archivos_AdjuntosId
                        };

                           lArchivosAdjuntosItems.push(imagenConCalidad);
                    });
                    console.log('este es el nuevo listado-->', lArchivosAdjuntosItems)
                    }
                }
            });
        }
    }
    //#endregion
</script>
