#pragma checksum "/Users/leandrolisa/Projects/082023_PuchetaWEB_test/Gestion.Web/Views/Certificados/_CertificadosLiquidaciones_Pestana.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cb06e699ee746d9964eebdb473d34953db3f2f45"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Certificados__CertificadosLiquidaciones_Pestana), @"mvc.1.0.view", @"/Views/Certificados/_CertificadosLiquidaciones_Pestana.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 2 "/Users/leandrolisa/Projects/082023_PuchetaWEB_test/Gestion.Web/Views/_ViewImports.cshtml"
using Gestion.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/leandrolisa/Projects/082023_PuchetaWEB_test/Gestion.Web/Views/_ViewImports.cshtml"
using Gestion.Web.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/leandrolisa/Projects/082023_PuchetaWEB_test/Gestion.Web/Views/_ViewImports.cshtml"
using Gestion.Web.ViewModels.Input;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cb06e699ee746d9964eebdb473d34953db3f2f45", @"/Views/Certificados/_CertificadosLiquidaciones_Pestana.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3bee31758dd1cbb7e600e265aed2cb74227e9428", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Certificados__CertificadosLiquidaciones_Pestana : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Gestion.EF.ReturnData>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/plugins/kendoui_2022_2_802/styles/kendo.bootstrap.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/plugins/kendoui_2022_2_802/js/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/plugins/kendoui_2022_2_802/js/kendo.all.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "cb06e699ee746d9964eebdb473d34953db3f2f455012", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"



<div class=""row"">
    <div class=""col-lg-12"">
        <div class=""card  card-rojo"">
            <div class=""row"">
                <div class=""col-12"" style=""padding-top: 2.3%; padding-left: 2%;"">
                    <div style=""text-align: center;padding-bottom:2%"">
                        <button class=""btn btn-primary"" type=""button"" onclick=""CargarGrillas()"">Actualizar Grillas</button>
                    </div>
                </div>
            </div>
            <div class=""form-group"" style=""box-shadow: 10px 10px 15px 8px grey;border-radius:5px;"">              
                <header style=""text-align:center;background-color:black;color:white;padding-top:3px; padding-bottom:1px;"">
                    <h6 style=""justify-content: center;font-weight: bold;"">Liquidaciones</h6>
                </header>
                <div class=""row"" style=""padding-top: 10px;padding-left:2%;font-size: large; width:400px;"">
                    <input type=""checkbox"" id=""chkCerIVA"" style=""font-size: 1");
            WriteLiteral(@".5em;padding-left:3%;padding-top:5px; width:20px; height:20px"" />
                </div>
           
                    <div class=""card-body"">
                        <div id=""GrillaKendoLiquidaciones""></div>
                    </div>
              
                <br />
            </div>
            <div class=""form-group"" style=""box-shadow: 10px 10px 15px 8px grey;border-radius:5px;"">
 
                    <header style=""text-align:center;background-color:black;color:white;padding-top:3px"">
                    <h6 style=""justify-content: center;font-weight: bold;"">Aplicacion de Pagos</h6>
                </header>
                <div class=""card-body"">
                    <input type=""hidden"" id=""IdAplicacionPago"" value=""0"" />
                    <div class=""row"" >
                        <div class=""col-md-3"">
                            <div class=""form-group"">
                                <label>Nombre:</label>
                                <input id=""txtNombreApellidoAplic");
            WriteLiteral("acion\" type=\"text\"");
            BeginWriteAttribute("title", " title=\"", 2190, "\"", 2198, 0);
            EndWriteAttribute();
            WriteLiteral(@"/>
                            </div>
                        </div>
                        <div class=""col-md-3"">
                            <div class=""form-group"">
                                <label>Monto :</label>
                                <input id=""txtMontoAplicacionPago"" type=""number""");
            BeginWriteAttribute("title", " title=\"", 2509, "\"", 2517, 0);
            EndWriteAttribute();
            WriteLiteral(@" min=""0"" max=""99999999"" step=""1"" />

                            </div>
                        </div>
                        <div class=""col-md-2 d-flex align-items-center"">                        
                            <button   class=""btn-graba"" 
                                    onclick=""agregarFilaAplicacion()"">
                                <i class=""fas fa-check""></i>
                                Grabar
                            </button>
                        </div>
                        <div class=""col-md-2 d-flex align-items-center"">
                            <button class=""btn-graba""
                                    onclick=""limpiar()"">
                                <i class=""fa fa-eraser""></i>
                                Limpiar
                            </button>
                        </div>
                    </div>
                
                
                        <div id=""GrillaKendAplicacionPago""></div>
                        ");
            WriteLiteral(@"<div class =""col-6"" style=""text-align:center; font-size:25px"">
                            <label class=""control-label""><strong>TOTAL CONTRATISTA:</strong> $</label>
                            <input id=""labelTotalContratista"" disabled style=""border: none;align-items:end; background-color:white;"" />
                        </div>
");
            WriteLiteral(@"                  
                </div>
                    <br />
            </div>
            <div class=""form-group"" style=""box-shadow: 10px 10px 15px 8px grey;border-radius:5px;"">
                <header style=""text-align:center;background-color:black;color:white;padding-top:3px"">
                    <h6 style=""justify-content: center;font-weight: bold;"">Partidas Presupuestarias- Ajustada</h6>
                </header>
                <div id=""GrillaKendoPartidaPresupuestariaAjustada""></div>

           
            </div>
        </div>
      
");
#nullable restore
#line 90 "/Users/leandrolisa/Projects/082023_PuchetaWEB_test/Gestion.Web/Views/Certificados/_CertificadosLiquidaciones_Pestana.cshtml"
         if (Model.data5.ToString() == "A Pagar")
        {     

#line default
#line hidden
#nullable disable
            WriteLiteral("            <button style=\"float:right;\" Id=\"btnFirmarCertificado\" class=\"btn btn-primary\"");
            BeginWriteAttribute("id", " id=\"", 4779, "\"", 4784, 0);
            EndWriteAttribute();
            WriteLiteral(" onclick=\"_cerrarCertificado()\">\r\n                Cerrar Certificado\r\n            </button>\r\n");
#nullable restore
#line 95 "/Users/leandrolisa/Projects/082023_PuchetaWEB_test/Gestion.Web/Views/Certificados/_CertificadosLiquidaciones_Pestana.cshtml"
         
        }
        else
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <button style=\"float:right;\" Id=\"btnFirmarCertificado\" class=\"btn btn-primary\"");
            BeginWriteAttribute("id", " id=\"", 5015, "\"", 5020, 0);
            EndWriteAttribute();
            WriteLiteral(" onclick=\"_firmarCertificado()\">\r\n                Aprobar Certificado\r\n            </button>\r\n");
#nullable restore
#line 102 "/Users/leandrolisa/Projects/082023_PuchetaWEB_test/Gestion.Web/Views/Certificados/_CertificadosLiquidaciones_Pestana.cshtml"
        }

#line default
#line hidden
#nullable disable
            WriteLiteral("        <button style=\"float:left; background-color:#0bdae1;\" class=\"btn\"");
            BeginWriteAttribute("id", " id=\"", 5199, "\"", 5204, 0);
            EndWriteAttribute();
            WriteLiteral(" onclick=\"generarPDF()\">\r\n            <i class=\"fas fa-file-pdf\"></i>\r\n            Generar PDF\r\n        </button>\r\n        <div id=\"Contenido_generarpdf\"></div>\r\n           \r\n       \r\n      \r\n</div>\r\n</div>\r\n\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cb06e699ee746d9964eebdb473d34953db3f2f4512867", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cb06e699ee746d9964eebdb473d34953db3f2f4513893", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<script type=\"text/x-kendo-template\" id=\"Grilla-Columna-Liquida\">\r\n");
            WriteLiteral(@"                  <div>$  #= cdl_Actividades_Adicionales ? cdl_Actividades_Adicionales :   '-' # </div>
       
</script>
<style>
    .hide-column {
        display: none;
    }


</style>
<script>
   // var dataGlobalCertificadosLiquidacion= JSON.parse('Html.Raw(Json.Serialize(Model))');                                       
     var dataGlobalCertificadosLiquidacion = JSON.parse(JSON.stringify(");
#nullable restore
#line 133 "/Users/leandrolisa/Projects/082023_PuchetaWEB_test/Gestion.Web/Views/Certificados/_CertificadosLiquidaciones_Pestana.cshtml"
                                                                  Write(Html.Raw(Json.Serialize(Model)));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"));

   //#region DefincionesGenerales
    $('#chkCerIVA').kendoCheckBox({
        label: ""Presenta Iva""
    });
    kendo.culture(""es-ES"");

    $(""#labelTotalContratista"").val(""0"");

    $(""#txtMontoAplicacionPago"").kendoNumericTextBox({
        format: ""c"",
        decimals: 2
    });
    $(""#txtNombreApellidoAplicacion"").kendoTextBox();


    //let strigConvertGlobal = (dataGlobalCertificadosLiquidacion.data4).toString();
    //$(""#labelTotalContratista"").val(strigConvertGlobal);
    var registros=[];
    
    //;
   
    //#endregion

   //#region InstanciasDeGrilla
    _cargarGrillaLiquidaciones([]);
    _cargarGrillaAplicacionesPago([]);
    _cargarGrillaPartidaPresupuestariaAjustada([]);
    //

    //#endregion

   //#region Liquidaciones
    function _cargarGrillaLiquidaciones(data) {
        dataSourceLiquidaciones = new kendo.data.DataSource({
                autoSync: false,
                pageSize: 50,
                data: data,
                batch: tru");
            WriteLiteral(@"e,
                aggregate: [
                { field: ""cdl_Acumulado_Actividades_Planificadas"", aggregate: ""sum"", format: ""{0:N2}"" },
                { field: ""cdl_Descuento_Por_Adelanto"", aggregate: ""sum"", format: ""{0:N2}"" },
                { field: ""cdl_Total_Sujeto_Ajuste"", aggregate: ""sum"", format: ""{0:N2}"" },
                { field: ""cdl_Actividades_Adicionales"", aggregate: ""sum"", format: ""{0:N2}"" },
                { field: ""cdl_Iva_Monto"", aggregate: ""sum"", format: ""{0:N2}"" },
                { field: ""cdl_Neto_Facturar"", aggregate: ""sum"", format: ""{0:N2}"" },
                { field: ""cdl_Total_A_Facturar"", aggregate: ""sum"", format: ""{0:N2}"" },
                { field: ""cdl_Fondo_Reparo_Monto"", aggregate: ""sum"", format: ""{0:N2}"" },
                { field: ""cdl_Total_A_Pagar"", aggregate: ""sum"", format: ""{0:N2}"" }
                ],
                schema: {

                    model: {
                        id: ""cdl_Id"",
                        fields: {
                       ");
            WriteLiteral(@" cdl_Id: { editable: false, nullable: false },
                                cdl_NroNotaPedido: { editable: false, nullable: false },
                                cdl_Acumulado_Actividades_Planificadas: { editable: false, nullable: false },
                                //--
                                cdl_Descuento_Por_Anticipo_Porcentaje: { editable: true, type: ""number"", nullable: false, defaultValue: 0, validation: { min: 0 } },
                                cdl_Descuento_Por_Anticipo_Monto: { editable: false, type: ""number"", nullable: true, validation: { min: 0 } },
                                cdl_Descuento_Por_Adelanto: { editable: true, type: ""number"", nullable: false, defaultValue: 0, validation: { min: 0 } },
                                //--
                                cdl_Total_Sujeto_Ajuste: { editable: false, nullable: false },
                                //--
                                cdl_Ajuste_Ind_Base: { editable: false, nullable: false },
        ");
            WriteLiteral(@"                        cdl_Ajuste_Ind_Actual: { editable: false, nullable: false },
                                cdl_Ajuste_Porc_Coeficiente: { editable: false, nullable: false },
                                cdl_Ajuste_Actualizacion: { editable: false, nullable: false },
                                //--
                                cdl_Actividades_Adicionales: { editable: false, nullable: true }, 
                                 cdl_Neto_Facturar: { editable: false, nullable: false },
                                 //--
                                cdl_Iva_Porcentaje: { type: ""number"", editable: true,  defaultValue: 0, values: [0, 10, 21] },
                                cdl_Iva_Monto: { editable: false, nullable: false },
                                cdl_Total_A_Facturar: { editable: false, nullable: false },
                                cdl_Nro_Poliza: { editable: false, nullable: false },
                                //--
                                cdl_Fondo");
            WriteLiteral(@"_Reparo_Porcentaje: { editable: true, type: ""number"", nullable: false, validation: { min: 0 } },
                                cdl_Fondo_Reparo_Monto: { editable: false, nullable: false },
                                cdl_Total_A_Pagar: { editable: false, nullable: false },
                                //--
                        }
                    }
                }
            });      

        $(""#GrillaKendoLiquidaciones"").html(""<div id='grillaLiquidacion'></div>"");

        var colGrillaLiquidacion = [
            
                    { field: ""cdl_NroNotaPedido"", title: ""NOTA DE </br> PEDIDO"", width: ""4px"" },
                    { field: ""cdl_Acumulado_Actividades_Planificadas"", format: ""{0:c}"", title: ""Actividades </br> Planificadas"", width: ""4px"", aggregates: [""sum""], footerTemplate: ""<div>$ #=sum#</div>"" },
                    {
                        title: ""<span style='color: black; font-weight: bold;'>Descuento </br> por Adelanto</span>"",
                        he");
            WriteLiteral(@"aderAttributes: { style: """" },
                        columns: [
                            { 
                                field: ""cdl_Descuento_Por_Anticipo_Porcentaje"",
                                title: ""%"", 
                                width: ""3.8px"",
                                editable: function (dataItem) { return isEditableLiquidacion(dataItem); },
                                filterable: false,
                        attributes: { style: ""text-align:center;background-color:grey;font-weight: bold;"" },
                                template: ""<span>#= data.cdl_Descuento_Por_Anticipo_Porcentaje #%</span>""
                            },
                            { field: ""cdl_Descuento_Por_Anticipo_Monto"", title: ""Monto"", format: ""{0:c}"", filterable: false, width: ""3.5px"", attributes: { style: ""text-align:center;"" } }
                           
                        ]
                    },
                    { field: ""cdl_Descuento_Por_Adelanto"", 
          ");
            WriteLiteral(@"          format: ""{0:c}"", title: ""Adelanto"",
                attributes: { style: ""text-align:center;background-color: grey;font-weight: bold;"" },
                    editable: function (dataItem) { return isEditableLiquidacion(dataItem); },
                    width: ""4.5px"" ,aggregates: [""sum""], footerTemplate: ""<div>$ #=sum#</div>"" },
                    { field: ""cdl_Total_Sujeto_Ajuste"", format: ""{0:c}"", title: ""TOTAL SUJETO </br> A </br> AJUSTE"", 
                    width: ""4px"", aggregates: [""sum""], footerTemplate: ""<div>$ #=sum#</div>"",
                        template: function (dataItem) {
                            return '<span style=""font-weight: bold;"">$' + dataItem.cdl_Total_Sujeto_Ajuste + '</span>';
                        }
                    },
                    {
                        title: ""<span style='color: black; font-weight: bold;'>AJUSTE <br/> (Indice)</span>"",
                        headerAttributes: { style: """" },
                        columns: [
        ");
            WriteLiteral(@"                    { field: ""cdl_Ajuste_Ind_Base"", title: ""Base"", format: ""{0:c}"", filterable: false, width: ""3.5px"", attributes: { style: ""text-align:center;"" } },
                            { field: ""cdl_Ajuste_Ind_Actual"", title: ""Actual"", format: ""{0:c}"", filterable: false, width: ""3.5px"", attributes: { style: ""text-align:center;"" } },
                            {
                                field: ""cdl_Ajuste_Porc_Coeficiente"",
                                title: ""%"",
                                width: ""3px"",
                                filterable: false,
                                attributes: { style: ""text-align:center;"" },
                                template: ""#= data.cdl_Ajuste_Porc_Coeficiente #%""
                            },
                            { 
                              field: ""cdl_Ajuste_Actualizacion"", 
                              title: ""Actualiz."", 
                              filterable: false, 
                              width:");
            WriteLiteral(@" ""5px"",
                                format: ""{0:c}"",
                              attributes: { style: ""text-align:center;"" } 
                            }
                        ]
                    },
                    {
                        title: ""Actividades </br> ADICIONALES"",
                        columns: [
                            {
                                field: ""cdl_Actividades_Adicionales"",
                                title:"" "",
                                template: kendo.template($(""#Grilla-Columna-Liquida"").html()),
                                width: ""4px"", media: ""(min-width: 4.5px)"",
                      
                                attributes: { style: ""text-align:center; "" },
                                aggregates: [""sum""], footerTemplate: ""<div>$ #=sum#</div""
                            }
                        ]
                    },
                    {
                        field: ""cdl_Neto_Facturar"",
             ");
            WriteLiteral(@"           title: ""NETO A </br> FACTURAR"",
                        width: ""5px"", aggregates: [""sum""], footerTemplate: ""<div>$ #=sum#</div>"",
                        template: function (dataItem) {
                            return '<span style=""font-weight: bold;"">$' + dataItem.cdl_Neto_Facturar + '</span>';
                        }
                    },
                    {
                        title: ""<span style='color: black; font-weight: bold;'>IVA</span>"",
                        headerAttributes: { style: """" },
                        columns: [
                            
                            {
                                field: ""cdl_Iva_Porcentaje"",
                                title: ""%"",
                                width: ""2.5px"",
                                filterable: false,
                        attributes: { style: ""text-align:center;background-color:grey;font-weight: bold;"" },
                                editor: function (container, options)");
            WriteLiteral(@" {
                                    if ($('#chkCerIVA').prop('checked') === true) {
                                        $('<select required name=""cdl_Iva_Porcentaje"">' +
                                            '<option value=""21"" selected>21</option>' +
                                            '<option value=""10"">10</option>' +
                                            '<option value=""0"">0</option>' +
                                            '</select>')
                                            .appendTo(container);
                                    }
                                }
                               
                            },
                            { field: ""cdl_Iva_Monto"", title: ""Monto IVA"", format: ""{0:c}"", filterable: false, width: ""4px"", attributes: { style: ""text-align:center;"" } },
                        ]
                    },
                    {
                        field: ""cdl_Total_A_Facturar"",
                        title: ");
            WriteLiteral(@"""TOTAL A </br> FACTURAR"",
                        width: ""5px"", aggregates: [""sum""], footerTemplate: ""<div>$ #=sum#</div>"",
                        template: function (dataItem) {
                            return '<span style=""font-weight: bold;"">$' + dataItem.cdl_Total_A_Facturar + '</span>';
                        }
                    },                  
                    { 
                        field: ""cdl_Nro_Poliza"", title: ""Seguro"", filterable: false, width: ""3.5px"", attributes: { style: ""text-align:center;"" } 
                    },
                    {
                        title: ""<span style='color: black; font-weight: bold;'>Fondo Reparo</span>"",
                        headerAttributes: { style: """" },
                        columns:[
                                {
                                    field: ""cdl_Fondo_Reparo_Porcentaje"",
                                    title: ""%"",
                                    width: ""3.5px"",
                             ");
            WriteLiteral(@"       filterable: false,
                        attributes: { style: ""text-align:center;background-color:grey;font-weight: bold;"" },
                                    template: ""#= data.cdl_Fondo_Reparo_Porcentaje #%""
                                },
                                { field: ""cdl_Fondo_Reparo_Monto"", title: ""Monto"", format: ""{0:c}"", filterable: false, width: ""4px"", attributes: { style: ""text-align:center;"" } },
                        ]
                    },
                    {
                        
                        field: ""cdl_Total_A_Pagar"", 
                        title: ""TOTAL A </br> PAGAR"", 
                        filterable: false, width: ""5.5px"", 
                        aggregates: [""sum""], 
                        //footerTemplate: ""<div>$ #=sum#</div>"",
                        footerTemplate: ""<div>$ #= kendo.toString(sum, 'n2') #</div>"",
                        template: function (dataItem) {
                                return '<span style=""");
            WriteLiteral(@"font-weight: bold;"">$' + dataItem.cdl_Total_A_Pagar + '</span>';
                            },
                    
                    
                    },
                    {
                        command:
                        {
                            name: ""kcertificate"",
                            text: """",
                            click: grabarDetalleLiquidaciones

                        },

                        title: """",
                        width: ""4%"",
                        attributes: { style: ""text-align:center;"" }
                    }
                
            
            
        ]
       
        var Grilla = $(""#grillaLiquidacion"").kendoGrid({
        columns: colGrillaLiquidacion,
            ////Funcion para marcar toda la fila
            //selectable: ""multiple row"",
            filterable: false,
            pageable: {
                refresh: true,
                pageSizes: true,
                buttonCount: 20,
         ");
            WriteLiteral(@"   },
            sortable: true,
            dataSource: dataSourceLiquidaciones,
            editable: true,
            scrollable: true,
            height:'500px',
            dataBound: function (e) {
    
                var grid = e.sender;
                var dataItems = grid.dataSource.view();
                for (var i = 0; i < dataItems.length; i++) {
                    if (dataItems[i].cdl_Actividades_Adicionales !== undefined) {
                        grid.tbody.find(""[data-uid='"" + dataItems[i].uid + ""'] td.hide-score"").addClass(""k-group-cell"");
                    }
                    if (dataItems[i].cdl_NroNotaPedido == ""Adicional"") {
                        var uid = dataItems[i].uid;
                        $(""#grillaLiquidacion tbody"").find(""tr[data-uid="" + uid + ""]"").addClass(""K-bacgraundRow_Z"");
                    }
                }

                
           }
        }).data(""kendoGrid"");

        $(document.body).keydown(function (e) {
            if (");
            WriteLiteral(@"e.altKey && e.keyCode == 87) {
                $(""#grillaLiquidacion"").data(""kendoGrid"").table.focus();
            }
        });
    }

    function grabarDetalleLiquidaciones(e) {

        
        if (ModoLecturaGeneral == ""Lectura"") {
            toastr.error(""No se puede editar si se ingreso en modo lectura."", { timeOut: 3000 });
            return;
        }
        var d = this.dataItem($(e.currentTarget).closest(""tr""));

        var model = {

            cdl_Id: d.cdl_Id,
            cdl_IdCertificados: d.cdl_IdCertificados,
            cdl_NroNotaPedido: d.cdl_NroNotaPedido,

            cdl_Nro_Poliza: d.cdl_Nro_Poliza,
            cdl_Actividades_Adicionales: d.cdl_Actividades_Adicionales,
            cdl_Acumulado_Actividades_Planificadas: d.cdl_Acumulado_Actividades_Planificadas,

            cdl_Ajuste_Actualizacion: d.cdl_Ajuste_Actualizacion,
            cdl_Ajuste_Ind_Actual: d.cdl_Ajuste_Ind_Actual,
            cdl_Ajuste_Ind_Base: d.cdl_Ajuste_Ind_Base,

      ");
            WriteLiteral(@"      cdl_Ajuste_Porc_Coeficiente: d.cdl_Ajuste_Porc_Coeficiente,
            cdl_Descuento_Por_Adelanto: d.cdl_Descuento_Por_Adelanto,
            cdl_Descuento_Por_Anticipo_Monto: d.cdl_Descuento_Por_Anticipo_Monto,

            cdl_Descuento_Por_Anticipo_Porcentaje: d.cdl_Descuento_Por_Anticipo_Porcentaje,
            cdl_Fondo_Reparo_Monto: d.cdl_Fondo_Reparo_Monto,
            cdl_Fondo_Reparo_Porcentaje: d.cdl_Fondo_Reparo_Porcentaje,
            cdl_Iva_Monto: d.cdl_Iva_Monto,

            cdl_Iva_Porcentaje: d.cdl_Iva_Porcentaje,
            cdl_Neto_Facturar: d.cdl_Neto_Facturar,
            cdl_Total_A_Facturar: d.cdl_Total_A_Facturar,

            cdl_Total_A_Pagar: d.cdl_Total_A_Pagar,
            cdl_Total_Sujeto_Ajuste: d.cdl_Total_Sujeto_Ajuste
        };

       
        $.post(""/Certificados/Update_Liquidacion"", model).done(function (e) {
            if (!e.isError) {
                toastr.success(e.data, { timeOut: 2000 });
                _cargarGrillaLiquidaciones(e.d");
            WriteLiteral(@"ata3);
               
                let strigConvert = (e.data2).toString();
                $(""#labelTotalContratista"").val(strigConvert);

                _cargarGrillaPartidaPresupuestariaAjustada(e.data4);
                toastr.success('Se grabo correctamente la modificacion de la Liquidación.', { timeOut: 2000 });
            } else {
                toastr.error(e.data, { timeOut: 2000 });
                _cargarGrillaLiquidaciones(dataGlobalCertificadosLiquidacion.data2);
            }
        });
    }
  
    function isEditableLiquidacion(dataItem) {
        if (dataItem.cdl_NroNotaPedido == null){
            return false;
        }
        return true;
    }

    //#endregion


   //#region AplicacionPagos
    function toggleZonaAplicacion() {
        var zonaApli = document.getElementById(""miZonaNuevoAdicional"");
        if (zonaApli.style.maxHeight) {
            zonaApli.style.maxHeight = null;
        } else {
            zonaApli.style.maxHeight = zonaApli.scr");
            WriteLiteral(@"ollHeight + ""px"";
        }
    }
    function _cargarGrillaAplicacionesPago(data) {
        dataSourceAplicacion = new kendo.data.DataSource({
            autoSync: false,
            pageSize: 50,
            data: data,
            batch: true,
            aggregate: [
                    { field: ""cap_Monto"", aggregate: ""sum"", format: ""{0:N2}"" },
            ],
            schema: {

                model: {
                    id: ""cap_Id"",
                    fields: {
                        cap_Id: { editable: false, nullable: false },
                        cap_IdCertificados: { editable: false, nullable: false },
                        cap_NombreApellido: { editable: true, nullable: false, type: ""string"", nullable: false },
                        cap_Monto: { editable: true, nullable: false, type: ""number"", nullable: false, validation: { min: 0 } }
                    }
                }
            },
        });

        $(""#GrillaKendAplicacionPago"").html(""<div id='gr");
            WriteLiteral(@"illaAplicacion'></div>"");

        var colGrillaAplicacion = [

                    { field: ""cap_NombreApellido"", title: ""Nombre y Apellido"", width: ""40px"" },
                    { field: ""cap_Monto"", format: ""{0:C}"", title: ""Monto"", width: ""60px"",
                        template: ""<div style='text-align:right'>#= kendo.toString(cap_Monto, 'c') #</div>"",
                        aggregates: [""sum""], footerTemplate: ""<div style='text-align:right'>TOTAL Operarios : $ #=kendo.toString(sum, 'n2')#</div>""},
                    {
                        command:
                        {
                            name: ""kedit"",
                            text: """",
                                click: editarAplicacionPago

                        },

                        title: """",
                        width: ""60px"",
                        attributes: { style: ""text-align:center;"" }
                    },
                    { command: { name: ""kdelete"", text: """", click: eliminarApl");
            WriteLiteral(@"icacionPago }, title: ""Ver"", width: ""15px"", attributes: { style: ""text-align:center;"" } }
                    

        ]

        var GrillaAplicacion = $(""#grillaAplicacion"").kendoGrid({
            columns: colGrillaAplicacion,
            navigatable: true,
            filterable: false,
            pageable: {
                refresh: true,
                pageSizes: true,
                buttonCount: 20,
            },
            dataSource: dataSourceAplicacion,
            scrollable: true,
            height: _calcularAlturaGrillaAplicacion(),
            reorderable: true,
            sortable: true,
       
        
        }).data(""kendoGrid"");

    }

    function editarAplicacionPago(e) {
  
        var d = this.dataItem($(e.currentTarget).closest(""tr""));
        
       var stringMonto = (d.cap_Monto).toString();  
       var stringNombre = (d.cap_NombreApellido).toString();
       var stringId = (d.cap_Id).toString();

        $(""#txtMontoAplicacionPago"").val(");
            WriteLiteral(@"stringMonto);
        
        $(""#txtNombreApellidoAplicacion"").val('' + stringNombre + '');

        $(""#IdAplicacionPago"").val('' + stringId + '');

        var txtAMontoEdit = $(""#txtMontoAplicacionPago"").data(""kendoNumericTextBox"");
        if(txtAMontoEdit!= undefined){
            txtAMontoEdit.value(stringMonto);
        }
        
    }

    function eliminarAplicacionPago(e) {
        if (ModoLecturaGeneral == ""Lectura"") {
            toastr.error(""No se puede editar si se ingreso en modo lectura."", { timeOut: 3000 });
            return;
        }

            var d = this.dataItem($(e.currentTarget).closest(""tr""));

            var model = {
                cap_Id: d.cap_Id,
                cap_IdCertificados: dataGlobalCertificadosLiquidacion.data3,
                cap_NombreApellido: d.cap_NombreApellido,
                cap_Monto: d.cap_Monto,
                cap_operacion: 'E'
            };


        $.post(""/Certificados/ABMAplicacionPagos_V2"", model).done(funct");
            WriteLiteral(@"ion (e) {
                if (!e.isError) {
                    toastr.success(e.data, { timeOut: 2000 });

                    _cargarGrillaAplicacionesPago(e.data3);

                let strigConvert = (e.data2).toString();
                $(""#labelTotalContratista"").val(strigConvert);
                } else {
                    toastr.error(e.data, { timeOut: 2000 });
                _cargarGrillaAplicacionesPago(registros);
                }
            });

        }

    function agregarFilaAplicacion() {
        if (ModoLecturaGeneral == ""Lectura"") {
            toastr.error(""No se puede editar si se ingreso en modo lectura."", { timeOut: 3000 });
            return;
        }
        if ($('#txtNombreApellidoAplicacion').val() == """") {
            toastr.error(""Debe ingresar un Nombre"", { timeOut: 2000 });
            return;
        }
        if ($('#txtMontoAplicacionPago').val() == ""0"" || $('#txtMontoAplicacionPago').val() == """") {
            toastr.error(""Debe ingresar u");
            WriteLiteral(@"n monto"", { timeOut: 2000 });
            return;
        }
        
        if ($('#IdAplicacionPago').val() == ""0"") {
            var model = {
                cap_Id: 0,
                cap_IdCertificados: dataGlobalCertificadosLiquidacion.data3,
                cap_NombreApellido: $('#txtNombreApellidoAplicacion').val(),
                cap_Monto: $('#txtMontoAplicacionPago').val(),
                cap_operacion: 'I'
            };
        }else{
            var model = {
                cap_Id: $('#IdAplicacionPago').val(),
                cap_IdCertificados: dataGlobalCertificadosLiquidacion.data3,
                cap_NombreApellido: $('#txtNombreApellidoAplicacion').val(),
                cap_Monto: $('#txtMontoAplicacionPago').val(),
                cap_operacion: 'U'
            };
        }


        $.post(""/Certificados/ABMAplicacionPagos_V2"", model).done(function (e) {
                if (!e.isError) {
                    toastr.success(e.data, { timeOut: 2000 });
      ");
            WriteLiteral(@"          _cargarGrillaAplicacionesPago(e.data3);

                //Actualizamos el Label del total
                let strigConvert = (e.data2).toString();
                $(""#labelTotalContratista"").val(strigConvert);

               limpiar();

                } else {
                    toastr.error(e.data, { timeOut: 2000 });
                    //_cargarGrillaAplicacionesPago(registros);
                }
            });

            }

    function _calcularAlturaGrillaAplicacion() {
        let Altura = ""200px"";
        if (registros.length > 3) {
            let Cantidad = (registros.length) * 80;
            Altura = Cantidad.toString() + ""px"";
        }
        return Altura;
    }

    function limpiar() {
        $('#txtNombreApellidoAplicacion').val("""");
        $('#txtMontoAplicacionPago').val(""0"");
        var txtAMontoDelete = $(""#txtMontoAplicacionPago"").data(""kendoNumericTextBox"");
        if(txtAMontoDelete != undefined){
            txtAMontoDelete.value(""0");
            WriteLiteral(@""");
        }
        $('#IdAplicacionPago').val(""0"");
    }
   //#endregion

   //#region PartidaPresupuestariaAjustada
        function _cargarGrillaPartidaPresupuestariaAjustada(data) {
            dataSourceAplicacion = new kendo.data.DataSource({
                autoSync: false,
                pageSize: 50,
                data: data,
                batch: true,
                aggregate: [
                    { field: ""_certificadoMonto"", aggregate: ""sum"", format: ""{0:N2}"" },
                ],
                schema: {

                    model: {
                        id: ""Id"",
                        fields: {
                            _codigoPartida: { editable: false, nullable: false },
                            _nombrePartida: { editable: false, nullable: false },
                            _certificadoMonto: { editable: false, nullable: false },
                        }
                    }
                },
            });

            $(""#GrillaKendoPar");
            WriteLiteral(@"tidaPresupuestariaAjustada"").html(""<div id='grillaPresupuestaria'></div>"");

            var colGrillaAplicacion = [
                        { field: ""_codigoPartida"", title: ""Codigo de Partida"", width: ""40px"" },
                        { field: ""_nombrePartida"", title: ""Nombre de Partida"", width: ""40px"" },
                        { field: ""_certificadoMonto"", format: ""{0:C}"", title: ""Certificado Actual"", width: ""60px"",
                template: ""<div style='text-align:right'>#= kendo.toString(_certificadoMonto, 'c') #</div>"",
                aggregates: [""sum""], footerTemplate: ""<div style='text-align:right'>TOTAL : $ #=sum#</div>""
            },
            ]

            var GrillaAplicacion = $(""#grillaPresupuestaria"").kendoGrid({
                columns: colGrillaAplicacion,
                navigatable: true,
                filterable: false,
                pageable: {
                    refresh: true,
                    pageSizes: true,
                    buttonCount: 20,
       ");
            WriteLiteral(@"         },
                dataSource: dataSourceAplicacion,
                editable: true,
                scrollable: true,
                height: ""400px"",
                // height: _calcularAlturaGrilla(),
                reorderable: true,
                sortable: true,


            }).data(""kendoGrid"");

        }
   //#endregion

   //#region FirmarCertificado _cerrarCertificado()
    function _firmarCertificado() {
        if (ModoLecturaGeneral == ""Lectura"") {
            toastr.error(""No se puede editar si se ingreso en modo lectura."", { timeOut: 3000 });
            return;
        }
            var model = {
                IdCertificado: dataGlobalCertificados.data1
            };

            $.post(""/Certificados/_AprobarCertificado"", model).done(function (e) {
                if (!e.isError) {
                    toastr.success(e.data, { timeOut: 3500 });       
                   
                    window.location.href = ""/Certificados/Index"";

          ");
            WriteLiteral(@"      } else {
                    toastr.error(e.data, { timeOut: 2000 });
                }
            });
        }

    function _cerrarCertificado() {
        if (ModoLecturaGeneral == ""Lectura"") {
            toastr.error(""No se puede editar si se ingreso en modo lectura."", { timeOut: 3000 });
            return;
        }
        var model = {
            IdCertificado: dataGlobalCertificados.data1
        };

        $.post(""/Certificados/_CerrarCertificado"", model).done(function (e) {
            if (!e.isError) {
                toastr.success(e.data3, { timeOut: 3500 });

                window.location.href = ""/Certificados/Index"";

            } else {
                toastr.error(e.data, { timeOut: 2000 });
            }
        });
    }
   //#endregion

   //#region Boton Actualizar
    function CargarGrillas() {
        var CertificadoId = { IdCertificado: dataGlobalCertificadosLiquidacion.data3};
        $.post(""/Certificados/CargarGrillasLiquidaciones"", Certi");
            WriteLiteral(@"ficadoId).done(
            function (e) {
                if (!e.isError) {
                    _cargarGrillaLiquidaciones(e.data2);
                    registros = e.data1;
                    _cargarGrillaAplicacionesPago(registros);
                    _cargarGrillaPartidaPresupuestariaAjustada(e.data);
                  
                    let strigConvertGlobal = (e.data4).toString();
                    $(""#labelTotalContratista"").val(strigConvertGlobal);
                   
                    HabilitarBotonPDFLiquidacion = true;
                    toastr.success('Se actualizo correctamente las Grillas.', { timeOut: 2000 });
                } else {
                    toastr.error('Hubo un problema al cargar las grillas de Liquidaciones.', { timeOut: 2000 });
                }
            });

    }
   //#endregion

</script>

");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Gestion.EF.ReturnData> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
