// <auto-generated />
using System;
using Gestion.EF.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gestion.EF.Migrations
{
    [DbContext(typeof(iotdbContext))]
    partial class iotdbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Gestion.EF.Models.Acciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Borrado")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Borrar")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Editar")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MenuDetalle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<bool>("OcultarZona1")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("OcultarZona2")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("OcultarZona3")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("OcultarZona4")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Acciones");
                });

            modelBuilder.Entity("Gestion.EF.Models.AccionesRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccionesID")
                        .HasColumnType("int");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccionesID");

                    b.HasIndex("RolesId");

                    b.ToTable("AccionesRoles");
                });

            modelBuilder.Entity("Gestion.EF.Models.Archivos_Adjuntos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Archivo")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("Extencion")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("NombreOriginal")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("URL")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("sUsuario")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Archivos_Adjuntos");
                });

            modelBuilder.Entity("Gestion.EF.Models.Archivos_Adjuntos_Relacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Archivos_AdjuntosId")
                        .HasColumnType("int");

                    b.Property<string>("Entidad")
                        .HasColumnType("varchar(5) CHARACTER SET utf8mb4")
                        .HasMaxLength(5);

                    b.Property<int>("IdEntidad")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Archivos_AdjuntosId");

                    b.ToTable("Archivos_Adjuntos_Relacion");
                });

            modelBuilder.Entity("Gestion.EF.Models.Calidad_Actividades_Valoracion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("IdCalidad_Items")
                        .HasColumnType("int");

                    b.Property<int>("IdIncidente")
                        .HasColumnType("int");

                    b.Property<int>("IdParteDiario")
                        .HasColumnType("int");

                    b.Property<int>("IdPlanificacion_Proyecto_ActividadId")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Valor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Calidad_Actividades_Valoracion");
                });

            modelBuilder.Entity("Gestion.EF.Models.Calidad_Items", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Destino")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Calidad_Items");
                });

            modelBuilder.Entity("Gestion.EF.Models.CertContr_PlanProyAct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Actividad")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float>("CantidadActual")
                        .HasColumnType("float");

                    b.Property<float>("CantidadAcumAnterior")
                        .HasColumnType("float");

                    b.Property<float>("CantidadAjuste")
                        .HasColumnType("float");

                    b.Property<float>("CantidadPlanificada")
                        .HasColumnType("float");

                    b.Property<int>("CertContrId")
                        .HasColumnType("int");

                    b.Property<float>("ImporteAcumAnterior")
                        .HasColumnType("float");

                    b.Property<float>("MontoPlanificado")
                        .HasColumnType("float");

                    b.Property<int>("NroItem")
                        .HasColumnType("int");

                    b.Property<string>("Partida")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PlanProyActId")
                        .HasColumnType("int");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UnidadMedida")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CertContrId");

                    b.HasIndex("PlanProyActId");

                    b.ToTable("CertContrs_PlanProyActs");
                });

            modelBuilder.Entity("Gestion.EF.Models.Certificados", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("IdContratista")
                        .HasColumnType("bigint");

                    b.Property<long>("IdProyecto")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUsuarioCreo")
                        .HasColumnType("bigint");

                    b.Property<string>("NroCertificado")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("Secuenciador")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Certificados");
                });

            modelBuilder.Entity("Gestion.EF.Models.Certificados_detalle_adicional", b =>
                {
                    b.Property<long>("cda_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("cda_ActividadaId")
                        .HasColumnType("bigint");

                    b.Property<string>("cda_Comentario")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("cda_EstaAprobada")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("cda_IdCertificados")
                        .HasColumnType("bigint");

                    b.Property<double?>("cda_Importe_Cantidad_Asignada")
                        .HasColumnType("double");

                    b.Property<DateTime?>("cda_Importe_FHasta")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("cda_Importe_Monto_Unitario")
                        .HasColumnType("double");

                    b.Property<double?>("cda_Moneda_Certificado_Actual")
                        .HasColumnType("double");

                    b.Property<long?>("cda_Partida_Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("cda_RubroId")
                        .HasColumnType("bigint");

                    b.Property<long?>("cda_UbicacionId")
                        .HasColumnType("bigint");

                    b.Property<string>("cda_UnidadMedida")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("cda_Id");

                    b.ToTable("certificados_detalle_adicional");
                });

            modelBuilder.Entity("Gestion.EF.Models.Certificados_detalle_aplicaciones_pagos", b =>
                {
                    b.Property<int>("cap_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("cap_IdCertificados")
                        .HasColumnType("int");

                    b.Property<double?>("cap_Monto")
                        .HasColumnType("double");

                    b.Property<string>("cap_NombreApellido")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("cap_Id");

                    b.ToTable("certificados_aplicacion_pagos");
                });

            modelBuilder.Entity("Gestion.EF.Models.Certificados_detalle_liquidacion", b =>
                {
                    b.Property<int>("cdl_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("cdl_Actividades_Adicionales")
                        .HasColumnType("double");

                    b.Property<double?>("cdl_Acumulado_Actividades_Planificadas")
                        .HasColumnType("double");

                    b.Property<double?>("cdl_Ajuste_Actualizacion")
                        .HasColumnType("double");

                    b.Property<double?>("cdl_Ajuste_Ind_Actual")
                        .HasColumnType("double");

                    b.Property<double?>("cdl_Ajuste_Ind_Base")
                        .HasColumnType("double");

                    b.Property<double?>("cdl_Ajuste_Porc_Coeficiente")
                        .HasColumnType("double");

                    b.Property<double?>("cdl_Descuento_Por_Adelanto")
                        .HasColumnType("double");

                    b.Property<double?>("cdl_Descuento_Por_Anticipo_Monto")
                        .HasColumnType("double");

                    b.Property<double?>("cdl_Descuento_Por_Anticipo_Porcentaje")
                        .HasColumnType("double");

                    b.Property<double?>("cdl_Fondo_Reparo_Monto")
                        .HasColumnType("double");

                    b.Property<double?>("cdl_Fondo_Reparo_Porcentaje")
                        .HasColumnType("double");

                    b.Property<int>("cdl_IdCertificados")
                        .HasColumnType("int");

                    b.Property<double?>("cdl_Iva_Monto")
                        .HasColumnType("double");

                    b.Property<double?>("cdl_Iva_Porcentaje")
                        .HasColumnType("double");

                    b.Property<double?>("cdl_Neto_Facturar")
                        .HasColumnType("double");

                    b.Property<string>("cdl_NroNotaPedido")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("cdl_Nro_Poliza")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double?>("cdl_Total_A_Facturar")
                        .HasColumnType("double");

                    b.Property<double?>("cdl_Total_A_Pagar")
                        .HasColumnType("double");

                    b.Property<double?>("cdl_Total_Sujeto_Ajuste")
                        .HasColumnType("double");

                    b.HasKey("cdl_Id");

                    b.ToTable("certificados_detalle_liquidacion");
                });

            modelBuilder.Entity("Gestion.EF.Models.Certificados_detalle_planificado", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double?>("Act_Acum_Actual_Moneda")
                        .HasColumnType("double");

                    b.Property<double?>("Act_Acum_Ant_Moneda")
                        .HasColumnType("double");

                    b.Property<double?>("Act_Acum_Ant_Unid")
                        .HasColumnType("double");

                    b.Property<double?>("Act_Acum_Total_Unid")
                        .HasColumnType("double");

                    b.Property<double?>("Act_Avance_Periodo_Unid")
                        .HasColumnType("double");

                    b.Property<double?>("Act_Cert_Actual_Moneda")
                        .HasColumnType("double");

                    b.Property<DateTime?>("Act_F_Desde")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Act_F_Hasta")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("Act_Presenta_Liquidacion")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ActividadNombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double?>("Cantidad_Asignada")
                        .HasColumnType("double");

                    b.Property<string>("Detalle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("IdCertificados")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdNotaPedido")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdNotaPedidoDetalle")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdPA")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdPPA")
                        .HasColumnType("bigint");

                    b.Property<double?>("Monto_Total")
                        .HasColumnType("double");

                    b.Property<double?>("Monto_Unitario")
                        .HasColumnType("double");

                    b.Property<string>("NroNotaPedido")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PartidaCodigo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("PartidaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RubroId")
                        .HasColumnType("bigint");

                    b.Property<string>("RubroNombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("UbicacionId")
                        .HasColumnType("bigint");

                    b.Property<string>("UbicacionNombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("certificados_detalle_planificado");
                });

            modelBuilder.Entity("Gestion.EF.Models.ContrCert_PDActContr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("CantRealCertificada")
                        .HasColumnType("float");

                    b.Property<float>("Cantidad")
                        .HasColumnType("float");

                    b.Property<int>("CertContrId")
                        .HasColumnType("int");

                    b.Property<int>("PDActContrId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CertContrId");

                    b.HasIndex("PDActContrId");

                    b.ToTable("CertContrs_PDActContrs");
                });

            modelBuilder.Entity("Gestion.EF.Models.ContrCertificado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CertContrAnteriorId")
                        .HasColumnType("int");

                    b.Property<int>("ContratistaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FecDesde")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FecHasta")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FecRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProyectoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioRegistroId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CertContrAnteriorId");

                    b.HasIndex("ContratistaId");

                    b.HasIndex("ProyectoId");

                    b.ToTable("Certificados_Contratistas");
                });

            modelBuilder.Entity("Gestion.EF.Models.Contratistas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Altura")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Barrio")
                        .IsRequired()
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("CP")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("Celular")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Dpto")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<int?>("ParteDiarioId")
                        .HasColumnType("int");

                    b.Property<string>("Piso")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("RubroId")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("UsuariosId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ParteDiarioId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("Contratistas");
                });

            modelBuilder.Entity("Gestion.EF.Models.Dispositivos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Detalle")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Dispositivos");
                });

            modelBuilder.Entity("Gestion.EF.Models.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Asunto")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Destinatarios")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Entidad")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EntidadId")
                        .HasColumnType("int");

                    b.Property<bool>("Enviado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FecCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Mensaje")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Remitente")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("Gestion.EF.Models.Incidentes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Criticidad")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("GeneraEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("GeneraSegIncidente")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ListaEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Rectype")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RolResponsable")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TipoIncidenteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Incidentes");
                });

            modelBuilder.Entity("Gestion.EF.Models.IncidentesHistorial_Detalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Asignacion_Area")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Asignacion_Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Asignacion_IdArea")
                        .HasColumnType("int");

                    b.Property<string>("Detalle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("IdIncidente_Historial")
                        .HasColumnType("int");

                    b.Property<string>("Modificacion_Usuario")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("IncidentesHistorial_Detalle");
                });

            modelBuilder.Entity("Gestion.EF.Models.IncidentesTipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("IncidentesTipo");
                });

            modelBuilder.Entity("Gestion.EF.Models.Incidentes_Historial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("ContratistasId")
                        .HasColumnType("int");

                    b.Property<string>("Creacion_Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Creacion_Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Creacion_UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha_Cierre")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IncidenteId")
                        .HasColumnType("int");

                    b.Property<int>("ParteDiarioId")
                        .HasColumnType("int");

                    b.Property<int>("ProyectoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Incidentes_Historial");
                });

            modelBuilder.Entity("Gestion.EF.Models.Indice_Valores", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<long>("IdIndice")
                        .HasColumnType("bigint");

                    b.Property<int>("Mes")
                        .HasColumnType("int");

                    b.Property<double>("Valor")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Indice_Valores");
                });

            modelBuilder.Entity("Gestion.EF.Models.Indices", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Codigo")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45);

                    b.HasKey("Id");

                    b.ToTable("Indices");
                });

            modelBuilder.Entity("Gestion.EF.Models.Informe_Actividad_Vencida", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DiasVencida")
                        .HasColumnType("int");

                    b.Property<DateTime>("FecCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FecUltimoAvance")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Fecha_Est_Fin")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PlanActividadId")
                        .HasColumnType("int");

                    b.Property<int>("PlanificacionProyectoActividadId")
                        .HasColumnType("int");

                    b.Property<float>("PorcAvanceObra")
                        .HasColumnType("float");

                    b.Property<int>("ProyectoId")
                        .HasColumnType("int");

                    b.Property<int>("ProyectoUbicacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Informes_Actividades_Vencidas");
                });

            modelBuilder.Entity("Gestion.EF.Models.Localidades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Localidad")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<int>("ProvinciasId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinciasId");

                    b.ToTable("Localidades");
                });

            modelBuilder.Entity("Gestion.EF.Models.Menus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<sbyte>("Activo")
                        .HasColumnType("tinyint(4)");

                    b.Property<bool>("Borrado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("IdMenuPadre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("Orden")
                        .HasColumnType("int(11)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Tipo")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.ToTable("menus");
                });

            modelBuilder.Entity("Gestion.EF.Models.NotaPedido", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Comentario")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ComentarioPoliza")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Fecha_Cierre")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Fecha_Creacion")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("IdContratista")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdIndiceAjuste")
                        .HasColumnType("bigint");

                    b.Property<long>("IdProyecto")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUsuario_Creacion")
                        .HasColumnType("bigint");

                    b.Property<string>("NroNP")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("PresentaPoliza")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("Secuencial")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("NotaPedido");
                });

            modelBuilder.Entity("Gestion.EF.Models.NotaPedido_Detalle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("Avance_Actual")
                        .HasColumnType("double");

                    b.Property<double>("Cantidad")
                        .HasColumnType("double");

                    b.Property<bool>("Finalizado")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("IdIndiceAjuste")
                        .HasColumnType("bigint");

                    b.Property<long>("IdNotaPedido")
                        .HasColumnType("bigint");

                    b.Property<long>("IdPA")
                        .HasColumnType("bigint");

                    b.Property<long>("IdPPA")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUbicacion")
                        .HasColumnType("bigint");

                    b.Property<double>("Precio_Contradado")
                        .HasColumnType("double");

                    b.Property<string>("UnidadMedida")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("NotaPedido_Detalle");
                });

            modelBuilder.Entity("Gestion.EF.Models.Notificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EntidadId")
                        .HasColumnType("int");

                    b.Property<string>("EntidadNombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("FecEmision")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FecLectura")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Mensaje")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Titulo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UsuarioEmisorId")
                        .HasColumnType("int(11)");

                    b.Property<int>("UsuarioReceptorId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioEmisorId");

                    b.HasIndex("UsuarioReceptorId");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("Gestion.EF.Models.ParteDiario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Asig_Comentario")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<int>("Asig_Contratista")
                        .HasColumnType("int");

                    b.Property<int>("Asig_Contratista_Presentes")
                        .HasColumnType("int");

                    b.Property<int>("Asig_Propios")
                        .HasColumnType("int");

                    b.Property<int>("Asig_Propios_Presentes")
                        .HasColumnType("int");

                    b.Property<string>("Covid_Comentario")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<int>("Covid_Contratista")
                        .HasColumnType("int");

                    b.Property<int>("Covid_Propioa")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha_Creacion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProyectoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProyectoId");

                    b.ToTable("ParteDiario");
                });

            modelBuilder.Entity("Gestion.EF.Models.ParteDiario_Actividades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("Avance")
                        .HasColumnType("float");

                    b.Property<string>("Comentarios")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Finalizados")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ParteDiarioId")
                        .HasColumnType("int");

                    b.Property<int>("Planificacion_ActividadesId")
                        .HasColumnType("int");

                    b.Property<int>("Planificacion_Proyecto_ActividadesId")
                        .HasColumnType("int");

                    b.Property<int>("UsuariosId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ParteDiarioId");

                    b.HasIndex("Planificacion_Proyecto_ActividadesId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("ParteDiario_Actividades");
                });

            modelBuilder.Entity("Gestion.EF.Models.ParteDiario_Actividades_Contratista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("AvanceActual")
                        .HasColumnType("decimal(65,30)");

                    b.Property<float>("Cantidad")
                        .HasColumnType("float");

                    b.Property<int>("ContratistasId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Finalizado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NotaPedidoDetalleId")
                        .HasColumnType("int");

                    b.Property<int>("NotaPedidoId")
                        .HasColumnType("int");

                    b.Property<int>("ParteDiarioId")
                        .HasColumnType("int");

                    b.Property<int>("ParteDiario_ActividadesId")
                        .HasColumnType("int");

                    b.Property<string>("TipoRegistro")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("TrabajoAyer")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TrabajoHoy")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ContratistasId");

                    b.HasIndex("ParteDiario_ActividadesId");

                    b.ToTable("ParteDiario_Actividades_Contratista");
                });

            modelBuilder.Entity("Gestion.EF.Models.ParteDiario_Actividades_Fotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ParteDiario_ActividadesId")
                        .HasColumnType("int");

                    b.Property<string>("URL_Foto")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ParteDiario_ActividadesId");

                    b.ToTable("ParteDiario_Actividades_Fotos");
                });

            modelBuilder.Entity("Gestion.EF.Models.ParteDiario_Asistencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Asig_Comentario")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Asig_Contratista")
                        .HasColumnType("int");

                    b.Property<int>("Asig_Contratista_Presentes")
                        .HasColumnType("int");

                    b.Property<int>("Asig_Propios")
                        .HasColumnType("int");

                    b.Property<int>("Asig_Propios_Presentes")
                        .HasColumnType("int");

                    b.Property<int>("ContratistasId")
                        .HasColumnType("int");

                    b.Property<string>("Covid_Comentario")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Covid_Contratista")
                        .HasColumnType("int");

                    b.Property<int>("Covid_Propioa")
                        .HasColumnType("int");

                    b.Property<int>("ParteDiarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContratistasId");

                    b.HasIndex("ParteDiarioId");

                    b.ToTable("ParteDiario_Asistencia");
                });

            modelBuilder.Entity("Gestion.EF.Models.ParteDiario_Contratista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<int>("ParteDiarioId")
                        .HasColumnType("int");

                    b.Property<int>("UsuariosId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ParteDiarioId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("ParteDiario_Contratista");
                });

            modelBuilder.Entity("Gestion.EF.Models.ParteDiario_Incidentes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ContratistaId")
                        .HasColumnType("int");

                    b.Property<string>("Criticidad")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("IncidenteId")
                        .HasColumnType("int");

                    b.Property<int>("NoConformidadId")
                        .HasColumnType("int");

                    b.Property<int>("ParteDiarioId")
                        .HasColumnType("int");

                    b.Property<string>("SolicitadoPor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ContratistaId");

                    b.HasIndex("IncidenteId");

                    b.HasIndex("ParteDiarioId");

                    b.ToTable("ParteDiario_Incidentes");
                });

            modelBuilder.Entity("Gestion.EF.Models.ParteDiario_Sol_ObrasAdic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .HasColumnType("varchar(1) CHARACTER SET utf8mb4")
                        .HasMaxLength(1);

                    b.Property<string>("Obra_Adicional")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<int>("ParteDiarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParteDiarioId");

                    b.ToTable("ParteDiario_Sol_ObrasAdic");
                });

            modelBuilder.Entity("Gestion.EF.Models.PartidaPresupuestaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("PartidasPresupuestarias");
                });

            modelBuilder.Entity("Gestion.EF.Models.PlanProyAct_Dependencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FecCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdUsuarioCreo")
                        .HasColumnType("int");

                    b.Property<int>("PPAHijaId")
                        .HasColumnType("int");

                    b.Property<int>("PPAPadreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PPAHijaId");

                    b.HasIndex("PPAPadreId");

                    b.ToTable("PlanProyAct_Dependencias");
                });

            modelBuilder.Entity("Gestion.EF.Models.Planificacion_Actividades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Descripción")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<int>("PartidaPresupuestariaId")
                        .HasColumnType("int");

                    b.Property<int>("Planificacion_Actividades_RubroId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartidaPresupuestariaId");

                    b.HasIndex("Planificacion_Actividades_RubroId");

                    b.ToTable("Planificacion_Actividades");
                });

            modelBuilder.Entity("Gestion.EF.Models.Planificacion_Actividades_Calidad_Items", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Como_Controlar")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Con_Elemento")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Con_Plano")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Controla")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Documentacion_Obra")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Donde")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Fecha_Ult_Modificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdPLanificacionActividades")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuarioMOdifico")
                        .HasColumnType("int");

                    b.Property<bool>("Inactivo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("varchar(1024) CHARACTER SET utf8mb4")
                        .HasMaxLength(1024);

                    b.Property<int>("Perioricidad")
                        .HasColumnType("int");

                    b.Property<string>("Realiza_Accion")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Se_Efectua")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Tolerancia")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Planificacion_Actividades_Calidad_Items");
                });

            modelBuilder.Entity("Gestion.EF.Models.Planificacion_Actividades_Rubro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Planificacion_Actividades_Rubro");
                });

            modelBuilder.Entity("Gestion.EF.Models.Planificacion_Actividades_Tareas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Descripción")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<int>("Planificacion_ActividadesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Planificacion_ActividadesId");

                    b.ToTable("Planificacion_Actividades_Tareas");
                });

            modelBuilder.Entity("Gestion.EF.Models.Planificacion_Proyecto_Actividades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("Avance")
                        .HasColumnType("float");

                    b.Property<float>("Cantidad")
                        .HasColumnType("float");

                    b.Property<int>("ContratistasId")
                        .HasColumnType("int");

                    b.Property<string>("Detalle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("EsAdicional")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FecEstFin_Original")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FecEstInicio_Original")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Fecha_Creacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Fecha_Est_Fin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Fecha_Est_Incio")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Fecha_Real_Fin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Fecha_Real_Incio")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Fecha_Ultima_Modificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Finalizados")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IdPadre")
                        .HasColumnType("int");

                    b.Property<float>("Incidencia")
                        .HasColumnType("float");

                    b.Property<float>("Monto")
                        .HasColumnType("float");

                    b.Property<int>("Planificacion_ActividadesId")
                        .HasColumnType("int");

                    b.Property<int>("Planificacion_Actividades_RubroId")
                        .HasColumnType("int");

                    b.Property<int>("Proyecto_UbicacionesId")
                        .HasColumnType("int");

                    b.Property<bool>("ReTrabajo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Solapable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UnidadMedida")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("UsuariosId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ContratistasId");

                    b.HasIndex("Planificacion_ActividadesId");

                    b.HasIndex("Planificacion_Actividades_RubroId")
                        .HasName("IX_Planificacion_Proyecto_Actividades_Planificacion_Actividade~1");

                    b.HasIndex("Proyecto_UbicacionesId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("Planificacion_Proyecto_Actividades");
                });

            modelBuilder.Entity("Gestion.EF.Models.Planificacion_Proyecto_Actividades_Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha_Est_Fin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Fecha_Est_Incio")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Planificacion_Proyecto_ActividadesId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Planificacion_Proyecto_ActividadesId");

                    b.ToTable("Planificacion_Proyecto_Actividades_Log");
                });

            modelBuilder.Entity("Gestion.EF.Models.ProcesoAutomatico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Entidad")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EntidadId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FecCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Motivo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ProcesosAutomaticos");
                });

            modelBuilder.Entity("Gestion.EF.Models.Provincias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Provincia")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Provincias");
                });

            modelBuilder.Entity("Gestion.EF.Models.ProyCert_Contratista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("Adelanto")
                        .HasColumnType("float");

                    b.Property<int>("ContratistaId")
                        .HasColumnType("int");

                    b.Property<bool>("EmiteFactura")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("IndiceActual")
                        .HasColumnType("float");

                    b.Property<float>("IndiceBase")
                        .HasColumnType("float");

                    b.Property<int>("NumeroCertificado")
                        .HasColumnType("int");

                    b.Property<float>("PorcentajeActualizacion")
                        .HasColumnType("float");

                    b.Property<float>("PorcentajeDescuentoAnticipo")
                        .HasColumnType("float");

                    b.Property<float>("PorcentajeFondoReparo")
                        .HasColumnType("float");

                    b.Property<float>("PorcentajeIVA")
                        .HasColumnType("float");

                    b.Property<int>("ProyCertificadoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContratistaId");

                    b.HasIndex("ProyCertificadoId");

                    b.ToTable("ProyCert_Contratistas");
                });

            modelBuilder.Entity("Gestion.EF.Models.ProyCert_Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApellidoNombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ContratistaId")
                        .HasColumnType("int");

                    b.Property<float>("Monto")
                        .HasColumnType("float");

                    b.Property<int>("ProyCertificadoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContratistaId");

                    b.HasIndex("ProyCertificadoId");

                    b.ToTable("ProyCert_Empleados");
                });

            modelBuilder.Entity("Gestion.EF.Models.ProyCert_PDActContr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("Cantidad")
                        .HasColumnType("float");

                    b.Property<int>("ContratistaId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("FecCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("ImporteAcumAnterior")
                        .HasColumnType("float");

                    b.Property<bool>("MontosAjustables")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PDActContrId")
                        .HasColumnType("int");

                    b.Property<int>("PlanProyActId")
                        .HasColumnType("int");

                    b.Property<int>("ProyCertificadoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCreoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContratistaId");

                    b.HasIndex("PDActContrId");

                    b.HasIndex("ProyCertificadoId");

                    b.ToTable("ProyCert_PDActContrs");
                });

            modelBuilder.Entity("Gestion.EF.Models.ProyCert_PDActContr_Adicional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Actividad")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ActividadDescripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float>("Cantidad")
                        .HasColumnType("float");

                    b.Property<string>("CodigoPartidaPresupuestaria")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ContratistaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FecCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("Monto")
                        .HasColumnType("float");

                    b.Property<bool>("MontosAjustables")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProyCertificadoId")
                        .HasColumnType("int");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UnidadMedida")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UsuarioCreoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContratistaId");

                    b.HasIndex("ProyCertificadoId");

                    b.ToTable("ProyCert_PDActContr_Adicionales");
                });

            modelBuilder.Entity("Gestion.EF.Models.ProyCert_PlanProyAct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Actividad")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ActividadDescripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float>("CantidadAutorizadaExcedente")
                        .HasColumnType("float");

                    b.Property<float>("CantidadPlanificada")
                        .HasColumnType("float");

                    b.Property<string>("CodigoPartidaPresupuestaria")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DescripcionPartidaPresupuestaria")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("ExcedenteAutorizado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FecCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("MontoPlanificado")
                        .HasColumnType("float");

                    b.Property<int>("NotificacionId")
                        .HasColumnType("int");

                    b.Property<int>("PartidaPresupuestariaId")
                        .HasColumnType("int");

                    b.Property<int>("PlanProyActId")
                        .HasColumnType("int");

                    b.Property<int>("ProyCertificadoId")
                        .HasColumnType("int");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UnidadMedida")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UsuarioCreoId")
                        .HasColumnType("int");

                    b.Property<bool>("Visada")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("PlanProyActId");

                    b.HasIndex("ProyCertificadoId");

                    b.ToTable("ProyCert_PlanProyActs");
                });

            modelBuilder.Entity("Gestion.EF.Models.ProyCertificado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("FecCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FecDesde")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FecHasta")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProyCertAnteriorId")
                        .HasColumnType("int");

                    b.Property<int>("ProyectoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCreoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProyCertAnteriorId");

                    b.HasIndex("ProyectoId");

                    b.ToTable("ProyCertificados");
                });

            modelBuilder.Entity("Gestion.EF.Models.ProyContr_Descuento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContratistaId")
                        .HasColumnType("int");

                    b.Property<string>("Documento")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("Monto")
                        .HasColumnType("float");

                    b.Property<string>("Numero")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProyectoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContratistaId");

                    b.HasIndex("ProyectoId");

                    b.ToTable("ProyContr_Descuentos");
                });

            modelBuilder.Entity("Gestion.EF.Models.Proyecto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Fecha_Fin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Fecha_Inicio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<int>("RespSH_UsuarioId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Tipo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UsuariosId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("RespSH_UsuarioId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("Proyecto");
                });

            modelBuilder.Entity("Gestion.EF.Models.Proyecto_Contratista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContratistaId")
                        .HasColumnType("int");

                    b.Property<int>("ProyectoId")
                        .HasColumnType("int");

                    b.Property<string>("sContratistas")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ContratistaId");

                    b.HasIndex("ProyectoId");

                    b.ToTable("Proyecto_Contratista");
                });

            modelBuilder.Entity("Gestion.EF.Models.Proyecto_Ubicaciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripción")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<int>("ProyectoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProyectoId");

                    b.ToTable("Proyecto_Ubicaciones");
                });

            modelBuilder.Entity("Gestion.EF.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Borrado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Gestion.EF.Models.RolesUsuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsuariosId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("RolesId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("RolesUsuarios");
                });

            modelBuilder.Entity("Gestion.EF.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Gestion.EF.Models.Usuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<sbyte>("Activo")
                        .HasColumnType("tinyint(4)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Avatar")
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("Borrado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<int?>("Grupo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("NUsuario")
                        .HasColumnName("nUsuario")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Rsid")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Rsn")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("Tipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1)")
                        .HasDefaultValueSql("'U'");

                    b.HasKey("Id");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("Gestion.EF.Models.UsuariosDireccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Altura")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Barrio")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<bool>("Borrado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CP")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Calle")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("Dpto")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("LocalidadesId")
                        .HasColumnType("int");

                    b.Property<string>("Piso")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("ProvinciasId")
                        .HasColumnType("int");

                    b.Property<int>("UsuariosId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("UsuariosId");

                    b.ToTable("UsuariosDireccion");
                });

            modelBuilder.Entity("Gestion.EF.Models.UsuariosDispositivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Borrado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DispositivosId")
                        .HasColumnType("int");

                    b.Property<string>("Empresa")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("FINGERTMP")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IMEI")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("ImageBase64")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Numero")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("OS")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("UsuariosId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("UsuariosId");

                    b.ToTable("UsuariosDispositivo");
                });

            modelBuilder.Entity("Gestion.EF.Models.UsuariosLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("AccionesId")
                        .HasColumnType("int");

                    b.Property<string>("Detalle")
                        .HasColumnName("detalle")
                        .HasColumnType("text")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdUsuarios")
                        .HasColumnType("int(11)");

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("usuarios_log");
                });

            modelBuilder.Entity("Gestion.EF.Models.AccionesRoles", b =>
                {
                    b.HasOne("Gestion.EF.Models.Acciones", "Acciones")
                        .WithMany()
                        .HasForeignKey("AccionesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Roles", null)
                        .WithMany("Acciones")
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.Archivos_Adjuntos_Relacion", b =>
                {
                    b.HasOne("Gestion.EF.Models.Archivos_Adjuntos", "Archivos_Adjuntos")
                        .WithMany()
                        .HasForeignKey("Archivos_AdjuntosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.CertContr_PlanProyAct", b =>
                {
                    b.HasOne("Gestion.EF.Models.ContrCertificado", "CertContr")
                        .WithMany("lCertContrs_PlanProyActs")
                        .HasForeignKey("CertContrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Planificacion_Proyecto_Actividades", "PlanProyAct")
                        .WithMany()
                        .HasForeignKey("PlanProyActId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.ContrCert_PDActContr", b =>
                {
                    b.HasOne("Gestion.EF.Models.ContrCertificado", "CertContr")
                        .WithMany("lCertContrs_PDActContrs")
                        .HasForeignKey("CertContrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.ParteDiario_Actividades_Contratista", "PDActContr")
                        .WithMany()
                        .HasForeignKey("PDActContrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.ContrCertificado", b =>
                {
                    b.HasOne("Gestion.EF.Models.ContrCertificado", "CertContrAnterior")
                        .WithMany()
                        .HasForeignKey("CertContrAnteriorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Contratistas", "Contratista")
                        .WithMany()
                        .HasForeignKey("ContratistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Proyecto", "Proyecto")
                        .WithMany()
                        .HasForeignKey("ProyectoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.Contratistas", b =>
                {
                    b.HasOne("Gestion.EF.Models.ParteDiario", null)
                        .WithMany("Contratistas")
                        .HasForeignKey("ParteDiarioId");

                    b.HasOne("Gestion.EF.Models.Usuarios", null)
                        .WithMany("Contratistas")
                        .HasForeignKey("UsuariosId");
                });

            modelBuilder.Entity("Gestion.EF.Models.Localidades", b =>
                {
                    b.HasOne("Gestion.EF.Models.Provincias", null)
                        .WithMany("Localidades")
                        .HasForeignKey("ProvinciasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.Notificacion", b =>
                {
                    b.HasOne("Gestion.EF.Models.Usuarios", "UsuarioEmisor")
                        .WithMany()
                        .HasForeignKey("UsuarioEmisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Usuarios", "UsuarioReceptor")
                        .WithMany()
                        .HasForeignKey("UsuarioReceptorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.ParteDiario", b =>
                {
                    b.HasOne("Gestion.EF.Models.Proyecto", "Proyecto")
                        .WithMany("ParteDiario")
                        .HasForeignKey("ProyectoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.ParteDiario_Actividades", b =>
                {
                    b.HasOne("Gestion.EF.Models.ParteDiario", "ParteDiario")
                        .WithMany("ParteDiario_Actividades")
                        .HasForeignKey("ParteDiarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Planificacion_Proyecto_Actividades", "Planificacion_Proyecto_Actividades")
                        .WithMany()
                        .HasForeignKey("Planificacion_Proyecto_ActividadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Usuarios", "Usuarios")
                        .WithMany()
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.ParteDiario_Actividades_Contratista", b =>
                {
                    b.HasOne("Gestion.EF.Models.Contratistas", "Contratistas")
                        .WithMany()
                        .HasForeignKey("ContratistasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.ParteDiario_Actividades", "ParteDiario_Actividades")
                        .WithMany("ParteDiario_Actividades_Contratista")
                        .HasForeignKey("ParteDiario_ActividadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.ParteDiario_Actividades_Fotos", b =>
                {
                    b.HasOne("Gestion.EF.Models.ParteDiario_Actividades", "ParteDiario_Actividades")
                        .WithMany("ParteDiario_Actividades_Fotos")
                        .HasForeignKey("ParteDiario_ActividadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.ParteDiario_Asistencia", b =>
                {
                    b.HasOne("Gestion.EF.Models.Contratistas", "Contratistas")
                        .WithMany()
                        .HasForeignKey("ContratistasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.ParteDiario", null)
                        .WithMany("ParteDiario_Asistencia")
                        .HasForeignKey("ParteDiarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.ParteDiario_Contratista", b =>
                {
                    b.HasOne("Gestion.EF.Models.ParteDiario", "ParteDiario")
                        .WithMany("ParteDiario_Contratista")
                        .HasForeignKey("ParteDiarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Usuarios", "Usuarios")
                        .WithMany()
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.ParteDiario_Incidentes", b =>
                {
                    b.HasOne("Gestion.EF.Models.Contratistas", "Contratista")
                        .WithMany()
                        .HasForeignKey("ContratistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Incidentes", "Incidente")
                        .WithMany()
                        .HasForeignKey("IncidenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.ParteDiario", "ParteDiario")
                        .WithMany("ParteDiario_Incidentes")
                        .HasForeignKey("ParteDiarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.ParteDiario_Sol_ObrasAdic", b =>
                {
                    b.HasOne("Gestion.EF.Models.ParteDiario", "ParteDiario")
                        .WithMany("ParteDiario_Sol_ObrasAdic")
                        .HasForeignKey("ParteDiarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.PlanProyAct_Dependencia", b =>
                {
                    b.HasOne("Gestion.EF.Models.Planificacion_Proyecto_Actividades", "PPAHija")
                        .WithMany()
                        .HasForeignKey("PPAHijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Planificacion_Proyecto_Actividades", "PPAPadre")
                        .WithMany()
                        .HasForeignKey("PPAPadreId")
                        .HasConstraintName("FK_PlanProyAct_Dependencias_Planificacion_Proyecto_Actividades~1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.Planificacion_Actividades", b =>
                {
                    b.HasOne("Gestion.EF.Models.PartidaPresupuestaria", "PartidaPresupuestaria")
                        .WithMany()
                        .HasForeignKey("PartidaPresupuestariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Planificacion_Actividades_Rubro", "Planificacion_Actividades_Rubro")
                        .WithMany()
                        .HasForeignKey("Planificacion_Actividades_RubroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.Planificacion_Actividades_Tareas", b =>
                {
                    b.HasOne("Gestion.EF.Models.Planificacion_Actividades", "Planificacion_Actividades")
                        .WithMany("Planificacion_Actividades_Tareas")
                        .HasForeignKey("Planificacion_ActividadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.Planificacion_Proyecto_Actividades", b =>
                {
                    b.HasOne("Gestion.EF.Models.Contratistas", "Contratistas")
                        .WithMany()
                        .HasForeignKey("ContratistasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Planificacion_Actividades", "Planificacion_Actividades")
                        .WithMany("Planificacion_Proyecto_Actividades")
                        .HasForeignKey("Planificacion_ActividadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Planificacion_Actividades_Rubro", "Planificacion_Actividades_Rubro")
                        .WithMany()
                        .HasForeignKey("Planificacion_Actividades_RubroId")
                        .HasConstraintName("FK_Planificacion_Proyecto_Actividades_Planificacion_Actividade~1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Proyecto_Ubicaciones", "Proyecto_Ubicaciones")
                        .WithMany("Planificacion_Contratistas_Actividades")
                        .HasForeignKey("Proyecto_UbicacionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Usuarios", "Usuarios")
                        .WithMany()
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.Planificacion_Proyecto_Actividades_Log", b =>
                {
                    b.HasOne("Gestion.EF.Models.Planificacion_Proyecto_Actividades", "Planificacion_Contratistas_Actividades")
                        .WithMany("Planificacion_Proyecto_Actividades_Log")
                        .HasForeignKey("Planificacion_Proyecto_ActividadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.ProyCert_Contratista", b =>
                {
                    b.HasOne("Gestion.EF.Models.Contratistas", "Contratista")
                        .WithMany()
                        .HasForeignKey("ContratistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.ProyCertificado", "ProyCertificado")
                        .WithMany("lProyCert_Contratistas")
                        .HasForeignKey("ProyCertificadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.ProyCert_Empleado", b =>
                {
                    b.HasOne("Gestion.EF.Models.Contratistas", "Contratista")
                        .WithMany()
                        .HasForeignKey("ContratistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.ProyCertificado", "ProyCertificado")
                        .WithMany("lProyCert_Empleados")
                        .HasForeignKey("ProyCertificadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.ProyCert_PDActContr", b =>
                {
                    b.HasOne("Gestion.EF.Models.Contratistas", "Contratista")
                        .WithMany()
                        .HasForeignKey("ContratistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.ParteDiario_Actividades_Contratista", "PDActContr")
                        .WithMany()
                        .HasForeignKey("PDActContrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.ProyCertificado", "ProyCertificado")
                        .WithMany("lProyCert_PDActContrs")
                        .HasForeignKey("ProyCertificadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.ProyCert_PDActContr_Adicional", b =>
                {
                    b.HasOne("Gestion.EF.Models.Contratistas", "Contratista")
                        .WithMany()
                        .HasForeignKey("ContratistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.ProyCertificado", "ProyCertificado")
                        .WithMany("lProyCert_PDActContr_Adicionales")
                        .HasForeignKey("ProyCertificadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.ProyCert_PlanProyAct", b =>
                {
                    b.HasOne("Gestion.EF.Models.Planificacion_Proyecto_Actividades", "PlanProyAct")
                        .WithMany()
                        .HasForeignKey("PlanProyActId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.ProyCertificado", "ProyCertificado")
                        .WithMany("lProyCert_PlanProyActs")
                        .HasForeignKey("ProyCertificadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.ProyCertificado", b =>
                {
                    b.HasOne("Gestion.EF.Models.ProyCertificado", "ProyCertAnterior")
                        .WithMany()
                        .HasForeignKey("ProyCertAnteriorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Proyecto", "Proyecto")
                        .WithMany()
                        .HasForeignKey("ProyectoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.ProyContr_Descuento", b =>
                {
                    b.HasOne("Gestion.EF.Models.Contratistas", "Contratista")
                        .WithMany()
                        .HasForeignKey("ContratistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Proyecto", "Proyecto")
                        .WithMany()
                        .HasForeignKey("ProyectoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.Proyecto", b =>
                {
                    b.HasOne("Gestion.EF.Models.Usuarios", "RespSH_Usuario")
                        .WithMany()
                        .HasForeignKey("RespSH_UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Usuarios", "Usuarios")
                        .WithMany()
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.Proyecto_Contratista", b =>
                {
                    b.HasOne("Gestion.EF.Models.Contratistas", "Contratista")
                        .WithMany()
                        .HasForeignKey("ContratistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Proyecto", "Proyecto")
                        .WithMany()
                        .HasForeignKey("ProyectoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.Proyecto_Ubicaciones", b =>
                {
                    b.HasOne("Gestion.EF.Models.Proyecto", "Proyecto")
                        .WithMany("Contratistas_Ubicaciones")
                        .HasForeignKey("ProyectoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.RolesUsuarios", b =>
                {
                    b.HasOne("Gestion.EF.Models.Roles", "Roles")
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gestion.EF.Models.Usuarios", "Usuarios")
                        .WithMany("Roles")
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.UsuariosDireccion", b =>
                {
                    b.HasOne("Gestion.EF.Models.Usuarios", null)
                        .WithMany("UsuariosDireccion")
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gestion.EF.Models.UsuariosDispositivo", b =>
                {
                    b.HasOne("Gestion.EF.Models.Usuarios", null)
                        .WithMany("UsuariosDispositivo")
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
